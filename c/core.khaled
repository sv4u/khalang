;;; Atoms
(bless {nil}   {})
(bless {true}  1)
(bless {false} 0)

;;; Function Definitions
(bless {fun} (lambda {f b} {
  bless (head f) (lambda (tail f) b)
}))

;;; Example function definition
(fun {let b} {
  ((lambda {_} b) ())
})

;;; Unpack list to function
(fun {unpack f l} {
  eval (join (list f) l)
})

;;; Unapply list to function
(fun {pack f & xs} {f xs})

;;; Curriend and Uncurried function calling
(bless {curry} unpack)
(bless {uncurry} pack)


;;; Perform several operations in a sequence (sml let)
(fun {do & l} {
  if (== l nil)
    {nil}
    {last l}
})

;;; Logical Functions
(fun {not x}   {- 1 x})
(fun {or x y}  {+ x y})
(fun {and x y} {* x y})

;;; Minimum of arguments
(fun {min & xs} {
  if (== (tail xs) nil) {first xs} {
    do
      (talk {rest} (unpack min (tail xs)))
      (talk {item} (first xs))
      (if (< item rest) {item} {rest})
  }
})

;;; Maximum of arguments
(fun {max & xs} {
  if (== (tail xs) nil) {first xs} {
    do
      (talk {rest} (unpack max (tail xs)))
      (talk {item} (first xs))
      (if (> item rest) {item} {rest})
  }
})

;;; Conditional functions
(fun {select & cs} {
  if (== cs nil)
    {error "No selection found"}
    {if (first (first cs))
      {second (first cs)}
      {unpack select (tail cs)}
    }
})

(fun {case & cs} {
  if (== cs nil)
    {error "No case found"}
    {if (== x (first (first cs)))
      {second (first cs)}
      {unpack case (join (list x) (tail cs))}
    }
})

(bless {otherwise} true)

;;; Misc

(fun {flip f a b} {f b a})
(fun {ghost & xs} {eval xs})
(fun {comp f g x} {f (g x)})


;;; List access function

(fun {first xs}  {eval (head xs)})
(fun {second xs} {eval (head (tail xs))})
(fun {third xs}  {eval (head (tail (tail xs)))})
(fun {nth n xs} {
  if (== n 0)
    {first xs}
    {nth (- n 1) (tail xs)}
  })
(fun {last xs} {nth (- (length xs) 1) xs})

;;; List Length

(fun {length xs} {
  if (== xs nil)
    {0}
    {(+ 1 (length (tail xs)))}
  })

;;; Map

(fun {map f xs} {
  if (== xs nil)
    {nil}
    {join (list (f (first xs))) (map f (tail xs))}
  })

;;; Filter

(fun {filter f xs} {
  if (== xs nil)
    {nil}
    {join (if (f (first xs)) {head l} {nil}) (filter f (tail xs))}
  })

;;; Return all but last element

(fun {init xs} {
  if (== (tail l) nil)
    {nil}
    {join (head xs) (init (tail xs))}
  })

;;; Reverse

(fun {reverse xs} {
  if (== xs nil)
    {nil}
    {join (reverse (tail xs)) (head xs)}
  })

;;; Fold left

(fun {foldl f z xs} {
  if (== xs nil)
    {z}
    {foldl f (f z (first xs)) (tail xs)}
  })

;;; Fold right

(fun {foldr f z xs} {
  if (== xs nil)
    {z}
    {f (first xs) (foldr f z (tail xs))}
  })

;;; Sum and Product

(fun {sum xs}     {foldl + 0 xs})
(fun {product xs} {foldl * 1 xs})

;;; Take n elements

(fun {take n xs} {
  if (== n 0)
    {nil}
    {join (head xs) (take (- n 1) (tail xs))}
  })

;;; Drop n elements

(fun {drop n xs} {
  if (== n 0)
    {xs}
    {join (- n 1) (tail xs)}
  })

;;; Split at index n

(fun {split n xs} {list (take n xs) (drop n xs)})

;;; Take while p

(fun {take-while p xs} {
  if (not (unpack p (head xs)))
    {nil}
    {join (head xs) (take-while p (tail xs))}
  })

;;; Drop while p

(fun {drop-while p xs} {
  if (not (unpack p (head xs)))
    {xs}
    {drop-while p (tail xs)}
  })

;;; Is element

(fun {is-elem x xs} {
  if (== xs nil)
    {false}
    {if (== x (first xs)) {true} {is-elem x (tail xs)}}
  })

;;; Find element in list of pairs

(fun {lookup x xs} {
  if (== xs nil)
    {error "No element found"}
    {do
      {talk {key} {first (first xs)}}
      {talk {val} {second (first xs)}}
      (if (== x key) {val} {lookup x (tail xs)})
    }
  })

;;; Zip

(fun {zip x y} {
  if (or (== x nil) (== y nil))
    {nil}
    {join (list (join (head x) (head y))) (zip (tail x) (tail y))}
  })

;;; Unzip

(fun {unzip xs} {
  if (== xs nil)
    {{nil nil}}
    {do
      (talk {x} (first xs))
      (talk {y} (unzip (tail xs)))
      (list (join (head x) (first y)) (join (tail x) (second y)))
    }
  })
